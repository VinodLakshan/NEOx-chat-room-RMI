/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import connector.ServerConnector;
import controller.ChatController;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import observer.ChatObserverImpl;

/**
 *
 * @author NEOx
 */
public class MainWindow extends javax.swing.JFrame {

    private ChatObserverImpl chatObserverImpl;
    private String selectedName;
    private String loginTime;
    private String logoutTime;
    /**
     * Creates new form MainWindow
     */
    private int isRegistered;
    private String name;
    public PrivateChatWindow pvt;
    private ArrayList<PrivateChatWindow> chattersList = new ArrayList<>();

    public MainWindow(String name, int isRegistered) {
        initComponents();
        jPanel2.hide();
        setTitle(name);
        this.isRegistered = isRegistered;
        this.name = name;

        Date d1 = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd  HH-mm");
        this.loginTime = sdf.format(d1);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtCancelText = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMessageBox = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        txtTypeBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblBackground2 = new javax.swing.JLabel();
        lblBackgroung = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setMinimumSize(new java.awt.Dimension(1024, 768));
        jPanel1.setLayout(null);

        jLabel1.setText("â‰¡  Message");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));

        txtCancelText.setText("jLabel2");

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(txtCancelText, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCancelText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(260, 300, 520, 120);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/logOut.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(870, 60, 100, 30);

        txtMessageBox.setEditable(false);
        txtMessageBox.setColumns(20);
        txtMessageBox.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 18)); // NOI18N
        txtMessageBox.setRows(5);
        jScrollPane2.setViewportView(txtMessageBox);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(406, 196, 500, 450);

        jLabel4.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Online Friends List");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(40, 130, 260, 60);

        jList1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(40, 190, 260, 520);

        txtTypeBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTypeBoxActionPerformed(evt);
            }
        });
        jPanel1.add(txtTypeBox);
        txtTypeBox.setBounds(410, 670, 500, 40);

        jLabel5.setFont(new java.awt.Font("Script MT Bold", 1, 48)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("NEO CHAT ROOM");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 20, 510, 80);

        jLabel3.setFont(new java.awt.Font("Poor Richard", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Public Chat ");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(380, 130, 230, 60);

        lblBackground2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/sdasd.png"))); // NOI18N
        jPanel1.add(lblBackground2);
        lblBackground2.setBounds(0, 0, 1030, 770);

        lblBackgroung.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/New Keyboard.png"))); // NOI18N
        jPanel1.add(lblBackgroung);
        lblBackgroung.setBounds(0, 0, 1030, 770);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTypeBoxActionPerformed
        try {
            ChatController chatController = ServerConnector.getServerConnector().getChatController();
            chatController.sendMessage(getTitle() + "  :  " + txtTypeBox.getText());
            txtTypeBox.setText("");
        } catch (NotBoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtTypeBoxActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isRegistered == 1) {
            try {
                ChatController chatController = ServerConnector.getServerConnector().getChatController();
                chatController.removeRegisteredChatter(chatObserverImpl, name);
            } catch (NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                ChatController chatController = ServerConnector.getServerConnector().getChatController();
                chatController.removeTemporaryChatter(chatObserverImpl);
            } catch (NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            Date d1 = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd  HH-mm");
            this.logoutTime = sdf.format(d1);

            try {
                ChatController chatController = ServerConnector.getServerConnector().getChatController();
                chatController.writeLogs(isRegistered, loginTime, logoutTime, this.getTitle());
            } catch (NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int x = JOptionPane.showConfirmDialog(null, "Are You Sure You want to Logout..?");
        if (x == 0) {
            if (isRegistered == 1) {
                try {
                    ChatController chatController = ServerConnector.getServerConnector().getChatController();
                    chatController.removeRegisteredChatter(chatObserverImpl, name);
                    this.dispose();
                    try {
                        Date d1 = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd  HH-mm");
                        this.logoutTime = sdf.format(d1);
                        chatController.writeLogs(isRegistered, loginTime, logoutTime, this.getTitle());
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    new LogIn().setVisible(true);
                } catch (NotBoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                try {
                    ChatController chatController = ServerConnector.getServerConnector().getChatController();
                    chatController.removeTemporaryChatter(chatObserverImpl);
                    this.dispose();
                    new LogIn().setVisible(true);
                } catch (NotBoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (isRegistered == 1) {
            try {
                String sendName = getTitle();
                String receiverName = jList1.getSelectedValue();
                this.selectedName = jList1.getSelectedValue();
                ChatController chatController = ServerConnector.getServerConnector().getChatController();
                chatController.checkInFriendList(sendName, receiverName, chatObserverImpl);
            } catch (NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "You need to be registered member to Access private chat....!!");
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jPanel2.hide();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public static javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBackground2;
    private javax.swing.JLabel lblBackgroung;
    private javax.swing.JLabel txtCancelText;
    private javax.swing.JTextArea txtMessageBox;
    private javax.swing.JTextField txtTypeBox;
    // End of variables declaration//GEN-END:variables

    public void previewMessage(String msg) {
        txtMessageBox.append(msg + "\n");
    }

    public void addChatter(ChatObserverImpl chatObserverImpl) {
        this.chatObserverImpl = chatObserverImpl;
    }

    public void getOnlineList(ArrayList<String> onlineList) {
        DefaultListModel<String> dlm = new DefaultListModel<>();
        jList1.setModel(dlm);
        dlm.removeAllElements();

        for (String user : onlineList) {
            if (!user.equals(name)) {
                dlm.addElement(user);
            }
        }
    }

    public void setPrivateMessage(String msg, String sendName, String recieveName) {
        int count = 0;
        if (recieveName.equalsIgnoreCase(getTitle())) {
            for (PrivateChatWindow privateChatWindow : chattersList) {
                if (sendName.equalsIgnoreCase(privateChatWindow.getTitle())) {
                    privateChatWindow.previewMessage(msg);
                } else {
                    count++;
                }
            }
        }

        if (chattersList.size() == count) {
            PrivateChatWindow pvtWindowx = new PrivateChatWindow(sendName, recieveName, this);
            chattersList.add(pvtWindowx);
            try {
                ChatController chatController = ServerConnector.getServerConnector().getChatController();
                String[] privateChatHistory = chatController.getPrivateChatHistory(sendName, recieveName);
                pvtWindowx.setPrivateChatHistory(privateChatHistory);
                pvtWindowx.previewMessage(msg);
                pvtWindowx.setVisible(true);
            } catch (NotBoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } catch (RemoteException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void updateFriendsList(boolean find, String sendName, String receiverName) {
        if (sendName.equalsIgnoreCase(getTitle())) {
            if (find) {
                int count = 0;
                for (PrivateChatWindow privateChatWindow : chattersList) {
                    if (receiverName.equalsIgnoreCase(privateChatWindow.getTitle())) {

                    } else {
                        count++;
                    }
                }

                if (count == chattersList.size()) {
                    PrivateChatWindow pvtWindow = new PrivateChatWindow(sendName, receiverName, this);
                    chattersList.add(pvtWindow);

                    try {
                        ChatController chatController = ServerConnector.getServerConnector().getChatController();
                        String[] privateChatHistory = chatController.getPrivateChatHistory(sendName, receiverName);
                        pvtWindow.setPrivateChatHistory(privateChatHistory);
                        pvtWindow.setVisible(true);

                    } catch (NotBoundException ex) {
                        Logger.getLogger(MainWindow.class
                                .getName()).log(Level.SEVERE, null, ex);

                    } catch (MalformedURLException ex) {
                        Logger.getLogger(MainWindow.class
                                .getName()).log(Level.SEVERE, null, ex);

                    } catch (RemoteException ex) {
                        Logger.getLogger(MainWindow.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                try {
                    ChatController chatController = ServerConnector.getServerConnector().getChatController();
                    chatController.sendRequest(sendName, receiverName);
                } catch (NotBoundException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (MalformedURLException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void setRequest(String sendName, String receiverName) {
        try {
            ChatController chatController = ServerConnector.getServerConnector().getChatController();
            int res = 0;
            if (receiverName.equalsIgnoreCase(getTitle())) {
                res = JOptionPane.showConfirmDialog(null, "" + sendName + " has sent you a request.Do you want to Confirm....??");
            }

            if (res == 0) {
                chatController.confirmRequest(sendName, receiverName);
                chatController.setPrivateChat(" ", sendName, receiverName);

            } else {
                chatController.cancelRequest(sendName, receiverName);

            }
        } catch (NotBoundException ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (MalformedURLException ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (RemoteException ex) {
            Logger.getLogger(MainWindow.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void cancelRequest(String sendName, String receiverName) {
        if (getTitle().equalsIgnoreCase(sendName)) {
            jPanel2.show();
            txtCancelText.setText("" + receiverName + " has canceled your Request....!!");
        }
    }

}
